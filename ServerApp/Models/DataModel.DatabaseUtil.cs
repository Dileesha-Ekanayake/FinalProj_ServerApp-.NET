//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 16/04/2024 11:50:17 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using MySql.EntityFrameworkCore.Extensions;
using Org.BouncyCastle.Tls;

namespace ServerApp
{

    public partial class DatabaseUtil : DbContext
    {

        public DatabaseUtil() :
            base()
        {
            OnCreated();
        }

        public DatabaseUtil(DbContextOptions<DatabaseUtil> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySQL(@"persistsecurityinfo=True;server=localhost;user id=root;password=1234;database=earthuniversity.net;maxAllowedPacket=67108864;");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Designation> Designations
        {
            get;
            set;
        }

        public virtual DbSet<Employee> Employees
        {
            get;
            set;
        }

        public virtual DbSet<Empstatus> Empstatus
        {
            get;
            set;
        }

        public virtual DbSet<Emptype> Emptypes
        {
            get;
            set;
        }

        public virtual DbSet<Gender> Genders
        {
            get;
            set;
        }

        public virtual DbSet<Module> Modules
        {
            get;
            set;
        }

        public virtual DbSet<Operation> Operations
        {
            get;
            set;
        }

        public virtual DbSet<Opetype> Opetypes
        {
            get;
            set;
        }

        public virtual DbSet<Privilege> Privileges
        {
            get;
            set;
        }

        public virtual DbSet<Role> Roles
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Userrole> Userroles
        {
            get;
            set;
        }

        public virtual DbSet<Usestatus> Usestatus
        {
            get;
            set;
        }

        public virtual DbSet<Usetype> Usetypes
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Configure entity mappings
            this.DesignationMapping(modelBuilder);
            this.CustomizeDesignationMapping(modelBuilder);

            this.EmployeeMapping(modelBuilder);
            this.CustomizeEmployeeMapping(modelBuilder);

            this.EmpstatuMapping(modelBuilder);
            this.CustomizeEmpstatuMapping(modelBuilder);

            this.EmptypeMapping(modelBuilder);
            this.CustomizeEmptypeMapping(modelBuilder);

            this.GenderMapping(modelBuilder);
            this.CustomizeGenderMapping(modelBuilder);

            this.ModuleMapping(modelBuilder);
            this.CustomizeModuleMapping(modelBuilder);

            this.OperationMapping(modelBuilder);
            this.CustomizeOperationMapping(modelBuilder);

            this.OpetypeMapping(modelBuilder);
            this.CustomizeOpetypeMapping(modelBuilder);

            this.PrivilegeMapping(modelBuilder);
            this.CustomizePrivilegeMapping(modelBuilder);

            this.RoleMapping(modelBuilder);
            this.CustomizeRoleMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.UserroleMapping(modelBuilder);
            this.CustomizeUserroleMapping(modelBuilder);

            this.UsestatuMapping(modelBuilder);
            this.CustomizeUsestatuMapping(modelBuilder);

            this.UsetypeMapping(modelBuilder);
            this.CustomizeUsetypeMapping(modelBuilder);

            modelBuilder.Entity<Employee>()
            .Property(e => e.Photo)
            .HasColumnName("photo")
            .HasColumnType("LONGBLOB");

            RelationshipsMapping(modelBuilder);

            CustomizeMapping(ref modelBuilder);
        }


        #region Designation Mapping

        private void DesignationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Designation>().ToTable(@"designation", @"earthuniversity.net");
            modelBuilder.Entity<Designation>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Designation>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Designation>().HasKey(@"Id");
        }

        partial void CustomizeDesignationMapping(ModelBuilder modelBuilder);

        #endregion

        #region Employee Mapping

        private void EmployeeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>().ToTable(@"employee", @"earthuniversity.net");
            modelBuilder.Entity<Employee>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Employee>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Callingname).HasColumnName(@"callingname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Employee>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.DesignationId).HasColumnName(@"designation_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Doassignment).HasColumnName(@"doassignment").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Dobirth).HasColumnName(@"dobirth").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Employee>().Property(x => x.EmpstatusId).HasColumnName(@"empstatus_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.EmptypeId).HasColumnName(@"emptype_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Fullname).HasColumnName(@"fullname").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<Employee>().Property(x => x.GenderId).HasColumnName(@"gender_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Land).HasColumnName(@"land").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Employee>().Property(x => x.Mobile).HasColumnName(@"mobile").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Employee>().Property(x => x.Nic).HasColumnName(@"nic").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(12);
            modelBuilder.Entity<Employee>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"char").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<Employee>().Property(x => x.Photo).HasColumnName(@"photo").HasColumnType(@"longblob").ValueGeneratedNever().HasMaxLength(67108864);
            modelBuilder.Entity<Employee>().HasKey(@"Id");
        }

        partial void CustomizeEmployeeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Empstatu Mapping

        private void EmpstatuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Empstatus>().ToTable(@"empstatus", @"earthuniversity.net");
            modelBuilder.Entity<Empstatus>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Empstatus>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Empstatus>().HasKey(@"Id");
        }

        partial void CustomizeEmpstatuMapping(ModelBuilder modelBuilder);

        #endregion

        #region Emptype Mapping

        private void EmptypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Emptype>().ToTable(@"emptype", @"earthuniversity.net");
            modelBuilder.Entity<Emptype>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Emptype>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Emptype>().HasKey(@"Id");
        }

        partial void CustomizeEmptypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Gender Mapping

        private void GenderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Gender>().ToTable(@"gender", @"earthuniversity.net");
            modelBuilder.Entity<Gender>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Gender>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Gender>().HasKey(@"Id");
        }

        partial void CustomizeGenderMapping(ModelBuilder modelBuilder);

        #endregion

        #region Module Mapping

        private void ModuleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Module>().ToTable(@"module", @"earthuniversity.net");
            modelBuilder.Entity<Module>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Module>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Module>().HasKey(@"Id");
        }

        partial void CustomizeModuleMapping(ModelBuilder modelBuilder);

        #endregion

        #region Operation Mapping

        private void OperationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Operation>().ToTable(@"operation", @"earthuniversity.net");
            modelBuilder.Entity<Operation>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Operation>().Property(x => x.ModuleId).HasColumnName(@"module_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Operation>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Operation>().Property(x => x.OpetypeId).HasColumnName(@"opetype_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Operation>().HasKey(@"Id");
        }

        partial void CustomizeOperationMapping(ModelBuilder modelBuilder);

        #endregion

        #region Opetype Mapping

        private void OpetypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Opetype>().ToTable(@"opetype", @"earthuniversity.net");
            modelBuilder.Entity<Opetype>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Opetype>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Opetype>().HasKey(@"Id");
        }

        partial void CustomizeOpetypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Privilege Mapping

        private void PrivilegeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Privilege>().ToTable(@"privilege", @"earthuniversity.net");
            modelBuilder.Entity<Privilege>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Privilege>().Property(x => x.Authority).HasColumnName(@"authority").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Privilege>().Property(x => x.ModuleId).HasColumnName(@"module_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Privilege>().Property(x => x.OperationId).HasColumnName(@"operation_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Privilege>().Property(x => x.RoleId).HasColumnName(@"role_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Privilege>().HasKey(@"Id");
        }

        partial void CustomizePrivilegeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Role Mapping

        private void RoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Role>().ToTable(@"role", @"earthuniversity.net");
            modelBuilder.Entity<Role>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Role>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Role>().HasKey(@"Id");
        }

        partial void CustomizeRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"user", @"earthuniversity.net");
            modelBuilder.Entity<User>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Docreated).HasColumnName(@"docreated").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.EmployeeId).HasColumnName(@"employee_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.Salt).HasColumnName(@"salt").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.Tocreated).HasColumnName(@"tocreated").HasColumnType(@"time").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.SysUserName).HasColumnName(@"username").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<User>().Property(x => x.UsestatusId).HasColumnName(@"usestatus_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.UsetypeId).HasColumnName(@"usetype_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().HasKey(@"Id");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Userrole Mapping

        private void UserroleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Userrole>().ToTable(@"userrole", @"earthuniversity.net");
            modelBuilder.Entity<Userrole>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Userrole>().Property(x => x.RoleId).HasColumnName(@"role_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Userrole>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Userrole>().HasKey(@"Id");
        }

        partial void CustomizeUserroleMapping(ModelBuilder modelBuilder);

        #endregion

        #region Usestatu Mapping

        private void UsestatuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Usestatus>().ToTable(@"usestatus", @"earthuniversity.net");
            modelBuilder.Entity<Usestatus>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Usestatus>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Usestatus>().HasKey(@"Id");
        }

        partial void CustomizeUsestatuMapping(ModelBuilder modelBuilder);

        #endregion

        #region Usetype Mapping

        private void UsetypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Usetype>().ToTable(@"usetype", @"earthuniversity.net");
            modelBuilder.Entity<Usetype>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Usetype>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Usetype>().HasKey(@"Id");
        }

        partial void CustomizeUsetypeMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Designation>().HasMany(x => x.Employees).WithOne(op => op.Designation).HasForeignKey(@"DesignationId").IsRequired(true);

            modelBuilder.Entity<Employee>().HasOne(x => x.Designation).WithMany(op => op.Employees).HasForeignKey(@"DesignationId").IsRequired(true);
            modelBuilder.Entity<Employee>().HasOne(x => x.Empstatus).WithMany(op => op.Employees).HasForeignKey(@"EmpstatusId").IsRequired(true);
            modelBuilder.Entity<Employee>().HasOne(x => x.Emptype).WithMany(op => op.Employees).HasForeignKey(@"EmptypeId").IsRequired(true);
            modelBuilder.Entity<Employee>().HasOne(x => x.Gender).WithMany(op => op.Employees).HasForeignKey(@"GenderId").IsRequired(true);
            modelBuilder.Entity<Employee>().HasMany(x => x.Users).WithOne(op => op.Employee).HasForeignKey(@"EmployeeId").IsRequired(true);

            modelBuilder.Entity<Empstatus>().HasMany(x => x.Employees).WithOne(op => op.Empstatus).HasForeignKey(@"EmpstatusId").IsRequired(true);

            modelBuilder.Entity<Emptype>().HasMany(x => x.Employees).WithOne(op => op.Emptype).HasForeignKey(@"EmptypeId").IsRequired(true);

            modelBuilder.Entity<Gender>().HasMany(x => x.Employees).WithOne(op => op.Gender).HasForeignKey(@"GenderId").IsRequired(true);

            modelBuilder.Entity<Module>().HasMany(x => x.Operations).WithOne(op => op.Module).HasForeignKey(@"ModuleId").IsRequired(false);
            modelBuilder.Entity<Module>().HasMany(x => x.Privileges).WithOne(op => op.Module).HasForeignKey(@"ModuleId").IsRequired(true);

            modelBuilder.Entity<Operation>().HasOne(x => x.Module).WithMany(op => op.Operations).HasForeignKey(@"ModuleId").IsRequired(false);
            modelBuilder.Entity<Operation>().HasOne(x => x.Opetype).WithMany(op => op.Operations).OnDelete(DeleteBehavior.Restrict).HasForeignKey(@"OpetypeId").IsRequired(true);
            modelBuilder.Entity<Operation>().HasMany(x => x.Privileges).WithOne(op => op.Operation).OnDelete(DeleteBehavior.Restrict).HasForeignKey(@"OperationId").IsRequired(true);

            modelBuilder.Entity<Opetype>().HasMany(x => x.Operations).WithOne(op => op.Opetype).OnDelete(DeleteBehavior.Restrict).HasForeignKey(@"OpetypeId").IsRequired(true);

            modelBuilder.Entity<Privilege>().HasOne(x => x.Module).WithMany(op => op.Privileges).HasForeignKey(@"ModuleId").IsRequired(true);
            modelBuilder.Entity<Privilege>().HasOne(x => x.Operation).WithMany(op => op.Privileges).OnDelete(DeleteBehavior.Restrict).HasForeignKey(@"OperationId").IsRequired(true);
            modelBuilder.Entity<Privilege>().HasOne(x => x.Role).WithMany(op => op.Privileges).HasForeignKey(@"RoleId").IsRequired(true);

            modelBuilder.Entity<Userrole>().HasKey(ur => new { ur.UserId, ur.RoleId });

            modelBuilder.Entity<Userrole>().HasOne(ur => ur.User).WithMany(u => u.Userroles).HasForeignKey(ur => ur.UserId).IsRequired(false).OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Userrole>().HasOne(ur => ur.Role).WithMany(r => r.Userroles).HasForeignKey(ur => ur.RoleId).IsRequired(false).OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Role>().HasMany(x => x.Privileges).WithOne(op => op.Role).HasForeignKey(@"RoleId").IsRequired(true);
            modelBuilder.Entity<Role>().HasMany(x => x.Userroles).WithOne(op => op.Role).HasForeignKey(@"RoleId").IsRequired(true);

            modelBuilder.Entity<User>().HasOne(x => x.Employee).WithMany(op => op.Users).HasForeignKey(@"EmployeeId").IsRequired(true);
            modelBuilder.Entity<User>().HasOne(x => x.Usestatus).WithMany(op => op.Users).HasForeignKey(@"UsestatusId").IsRequired(true);
            modelBuilder.Entity<User>().HasOne(x => x.Usetype).WithMany(op => op.Users).HasForeignKey(@"UsetypeId").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.Userroles).WithOne(op => op.User).HasForeignKey(@"UserId");

            modelBuilder.Entity<Userrole>().HasOne(x => x.Role).WithMany(op => op.Userroles).HasForeignKey(@"RoleId");
            modelBuilder.Entity<Userrole>().HasOne(x => x.User).WithMany(op => op.Userroles).HasForeignKey(@"UserId");

            modelBuilder.Entity<Usestatus>().HasMany(x => x.Users).WithOne(op => op.Usestatus).HasForeignKey(@"UsestatusId").IsRequired(true);

            modelBuilder.Entity<Usetype>().HasMany(x => x.Users).WithOne(op => op.Usetype).HasForeignKey(@"UsetypeId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
